FUNCTION_BLOCK "S0831_TREND_CONFIG"
{ S7_Optimized_Access := 'TRUE' }
VERSION : 0.1
   VAR_INPUT 
      i_arXBottom : Array[0..10] of Real;
      i_arYLeft : Array[0..10] of Real;
      i_arYRight : Array[0..10] of Real;
      i_rCorte : Real;
      i_rAromatizacao : Real;
   END_VAR

   VAR_OUTPUT 
      q_rX : Real;
      q_rYLeft : Real;
      q_rYRight : Real;
      q_rCorte : Real;
      q_rAromatizao : Real;
      q_iNumberOfPoints : Int;
      q_rMinTemperature : Real;
      q_rMaxTemperature : Real;
      q_rMinTempYLeft : Real;
      q_rMaxTempYLeft : Real;
      q_rMinTempYRight : Real;
      q_rMaxTempYRight : Real;
      q_rMinTempXBottom : Real;
      q_rMaxTempXBottom : Real;
   END_VAR

   VAR 
      ls_iStep1 : Int;
      ls_iIteration1 { S7_SetPoint := 'True'} : Int;
      ls_iPointer : Int;
      ls_sTrendPoints : Struct
         arXBottom : Array[0..12] of Real;
         arYLeft : Array[0..12] of Real;
         arYRight : Array[0..12] of Real;
         arCorte : Array[0..12] of Real;
         arAromatizacao : Array[0..12] of Real;
      END_STRUCT;
      R_TRIG_Clock {InstructionName := 'R_TRIG'; LibVersion := '1.0'} : R_TRIG;
      ls_bClock { S7_SetPoint := 'True'} : Bool;
      ls_rM : Real;
      ls_bCorteBetween : Bool;
      ls_bAromatizacaoBetween : Bool;
      ls_iNumberOfPoints : Int;
      ls_rMinTemperature : Real;
      ls_rMaxTemperature : Real;
      ls_iHaCorte : Int;
      ls_iHaAromatizacao : Int;
      ls_iPontoCorteIgual : Int;
      ls_iPontoAromatizacaoIgual : Int;
      ls_rMinTempYLeft : Real := 1000.0;
      ls_rMaxTempYLeft : Real := -1000.0;
      ls_rMinTempYRight : Real := 1000.0;
      ls_rMaxTempYRight : Real := -1000.0;
      ls_rMinTempXBottom : Real := 1000.0;
      ls_rMaxTempXBottom : Real := -1000.0;
   END_VAR


BEGIN
	REGION MONTA O ARRAY DE TREND (10pts --> 12pts)
	    //TESTE TESTE TESTE
	    //O gatilho para execução do sistema de trend é a variável #ls_iStep1 passar para zero
	    IF #ls_iStep1 = 0 THEN
	        //Reseta ponto de corte igual e ponto de aromatização igual
	        #ls_iPontoCorteIgual := 0;
	        #ls_iPontoAromatizacaoIgual := 0;
	        //Inicia os valores da temperatura do Y da esquerda
	        #ls_rMaxTempYLeft := -1000.0;
	        #ls_rMinTempYLeft := 1000.0;
	        //Inicia os valores da temperatura do Y da esquerda
	        #ls_rMaxTempYRight := -1000.0;
	        #ls_rMinTempYRight := 1000.0;
	        //Inicia os valores de temperatura do X inferior
	        #ls_rMaxTempXBottom := -1000.0;
	        #ls_rMinTempXBottom := 1000.0;
	        //Conta a quantidade de pontos
	        FOR #ls_iIteration1 := 1 TO 10 DO
	            IF #i_arYLeft[#ls_iIteration1] = 0 AND #i_arYRight[#ls_iIteration1] = 0 AND #i_arXBottom[#ls_iIteration1] = 0 AND #ls_iIteration1 > 1 THEN
	                #ls_iNumberOfPoints := #ls_iIteration1 - 1;
	                EXIT;
	            END_IF;
	            IF (#ls_iIteration1 = 10) AND NOT (#i_arYLeft[#ls_iIteration1] = 0 AND #i_arYRight[#ls_iIteration1] = 0 AND #i_arXBottom[#ls_iIteration1] = 0) THEN
	                #ls_iNumberOfPoints := 10;
	                EXIT;
	            END_IF;
	        END_FOR;
	        //Retira pontos de corte e aromatização iguais
	        //Retira max e min para o Y esquerdo
	        //Retira o max e min para o X inferior
	        FOR #ls_iIteration1 := 1 TO #ls_iNumberOfPoints DO
	            IF #i_arXBottom[#ls_iIteration1] = #i_rCorte AND #i_rCorte <> 0 THEN
	                #ls_iPontoCorteIgual := #ls_iIteration1;
	            END_IF;
	            IF #i_arXBottom[#ls_iIteration1] = #i_rAromatizacao AND #i_rAromatizacao <> 0 THEN
	                #ls_iPontoAromatizacaoIgual := #ls_iIteration1;
	            END_IF;
	            IF #ls_rMinTempYLeft > #i_arYLeft[#ls_iIteration1] THEN
	                #ls_rMinTempYLeft := #i_arYLeft[#ls_iIteration1] - (#i_arYLeft[#ls_iIteration1] * 5 / 100);
	            END_IF;
	            IF #ls_rMaxTempYLeft < #i_arYLeft[#ls_iIteration1] THEN
	                #ls_rMaxTempYLeft := #i_arYLeft[#ls_iIteration1] + (#i_arYLeft[#ls_iIteration1] * 5 / 100);
	            END_IF;
	            IF #ls_rMinTempYRight > #i_arYRight[#ls_iIteration1] THEN
	                #ls_rMinTempYRight := #i_arYRight[#ls_iIteration1] - (#i_arYRight[#ls_iIteration1] * 5 / 100);
	            END_IF;
	            IF #ls_rMaxTempYRight < #i_arYRight[#ls_iIteration1] THEN
	                #ls_rMaxTempYRight := #i_arYRight[#ls_iIteration1] + (#i_arYRight[#ls_iIteration1] * 5 / 100);
	            END_IF;
	            IF #ls_rMinTempXBottom > #i_arXBottom[#ls_iIteration1] THEN
	                #ls_rMinTempXBottom := #i_arXBottom[#ls_iIteration1] - 5;
	            END_IF;
	            IF #ls_rMaxTempXBottom < #i_arXBottom[#ls_iIteration1] THEN
	                #ls_rMaxTempXBottom := #i_arXBottom[#ls_iIteration1] + 5;
	            END_IF;
	        END_FOR;
	        //Verifica se há ponto de corte e ponto de aromatização
	        IF #i_rCorte = 0.0 OR (#i_rCorte > #i_arXBottom[#ls_iNumberOfPoints]) OR (#ls_iPontoCorteIgual <> 0) THEN
	            #ls_iHaCorte := 0;
	        ELSE
	            #ls_iHaCorte := 1;
	        END_IF;
	        IF #i_rAromatizacao = 0.0 OR (#i_rAromatizacao > #i_arXBottom[#ls_iNumberOfPoints]) OR (#ls_iPontoAromatizacaoIgual <> 0) THEN
	            #ls_iHaAromatizacao := 0;
	        ELSE
	            #ls_iHaAromatizacao := 1;
	        END_IF;
	        //Aumenta a quantidade de pontos
	        #ls_iNumberOfPoints := #ls_iNumberOfPoints + #ls_iHaCorte + #ls_iHaAromatizacao;
	        //Inicia o poteiro de organização dos arrays
	        #ls_iPointer := 1;
	        FOR #ls_iIteration1 := 1 TO #ls_iNumberOfPoints - 1 - (#ls_iHaCorte + #ls_iHaAromatizacao) DO
	            //Possibilidades:
	            //1) Ponto de corte e aromatização não estão entre os pontos
	            //2) Ponto de corte ou aromatizacao sobre um ponto de temperatura do café
	            //3) Ponto de corte e aromatização estão entre os pontos
	            //4) Somente o ponto de corte está está entre os pontos
	            //5) Somente o ponto de aromatização está entre os pontos
	            
	            //Condições: +Condição de ponto de corte ou aromatização sobre ponto de temperatura
	            IF (#i_rCorte <> 0.0) AND NOT (#ls_iPontoCorteIgual <> 0) THEN
	                #ls_bCorteBetween := (#i_rCorte > #i_arXBottom[#ls_iIteration1] AND #i_rCorte < #i_arXBottom[#ls_iIteration1 + 1]);
	            ELSE
	                #ls_bCorteBetween := FALSE;
	            END_IF;
	            IF (#i_rAromatizacao <> 0.0) AND NOT (#ls_iPontoAromatizacaoIgual <> 0) THEN
	                #ls_bAromatizacaoBetween := (#i_rAromatizacao > #i_arXBottom[#ls_iIteration1] AND #i_rAromatizacao < #i_arXBottom[#ls_iIteration1 + 1]);
	            ELSE
	                #ls_bAromatizacaoBetween := FALSE;
	            END_IF;
	            
	            IF NOT #ls_bCorteBetween AND NOT #ls_bAromatizacaoBetween AND NOT (#ls_iPontoCorteIgual = #ls_iIteration1) AND NOT (#ls_iPontoAromatizacaoIgual = #ls_iIteration1) THEN
	                
	                //Replica o valor de entrada para o eixo X
	                #ls_sTrendPoints.arXBottom[#ls_iPointer] := #i_arXBottom[#ls_iIteration1];
	                //Replica o valor de entrada para o eixo Y da esquerda
	                #ls_sTrendPoints.arYLeft[#ls_iPointer] := #i_arYLeft[#ls_iIteration1];
	                //Replica o valor de entrada para o eixo Y da direita
	                #ls_sTrendPoints.arYRight[#ls_iPointer] := #i_arYRight[#ls_iIteration1];
	                //Mantém o valor do Corte
	                IF #ls_iPointer = 1 THEN
	                    #ls_sTrendPoints.arCorte[#ls_iPointer] := -2000;
	                ELSE
	                    #ls_sTrendPoints.arCorte[#ls_iPointer] := #ls_sTrendPoints.arCorte[#ls_iPointer - 1];
	                END_IF;
	                //Mantém o valor da Aromatização
	                IF #ls_iPointer = 1 THEN
	                    #ls_sTrendPoints.arAromatizacao[#ls_iPointer] := -2000;
	                ELSE
	                    #ls_sTrendPoints.arAromatizacao[#ls_iPointer] := #ls_sTrendPoints.arAromatizacao[#ls_iPointer - 1];
	                END_IF;
	                //Incrementa o ponteiro
	                #ls_iPointer := #ls_iPointer + 1;
	                
	            ELSIF NOT #ls_bCorteBetween AND NOT #ls_bAromatizacaoBetween AND ((#ls_iPontoCorteIgual = #ls_iIteration1) OR (#ls_iPontoAromatizacaoIgual = #ls_iIteration1)) THEN
	                
	                IF (#ls_iPontoCorteIgual = #ls_iIteration1) AND NOT (#ls_iPontoAromatizacaoIgual = #ls_iIteration1) THEN
	                    
	                    //Replica o valor de entrada para o eixo X
	                    #ls_sTrendPoints.arXBottom[#ls_iPointer] := #i_arXBottom[#ls_iIteration1];
	                    //Replica o valor de entrada para o eixo Y da esquerda
	                    #ls_sTrendPoints.arYLeft[#ls_iPointer] := #i_arYLeft[#ls_iIteration1];
	                    //Replica o valor de entrada para o eixo Y da direita
	                    #ls_sTrendPoints.arYRight[#ls_iPointer] := #i_arYRight[#ls_iIteration1];
	                    //Mantém o valor do Corte
	                    #ls_sTrendPoints.arCorte[#ls_iPointer] := 2000;
	                    //Mantém o valor da Aromatização
	                    #ls_sTrendPoints.arAromatizacao[#ls_iPointer] := #ls_sTrendPoints.arAromatizacao[#ls_iPointer - 1];
	                    //Incrementa o ponteiro
	                    #ls_iPointer := #ls_iPointer + 1;
	                    #ls_iPontoCorteIgual := 0;
	                    
	                END_IF;
	                
	                IF NOT (#ls_iPontoCorteIgual = #ls_iIteration1) AND (#ls_iPontoAromatizacaoIgual = #ls_iIteration1) THEN
	                    
	                    //Replica o valor de entrada para o eixo X
	                    #ls_sTrendPoints.arXBottom[#ls_iPointer] := #i_arXBottom[#ls_iIteration1];
	                    //Replica o valor de entrada para o eixo Y da esquerda
	                    #ls_sTrendPoints.arYLeft[#ls_iPointer] := #i_arYLeft[#ls_iIteration1];
	                    //Replica o valor de entrada para o eixo Y da direita
	                    #ls_sTrendPoints.arYRight[#ls_iPointer] := #i_arYRight[#ls_iIteration1];
	                    //Mantém o valor do Corte
	                    #ls_sTrendPoints.arCorte[#ls_iPointer] := #ls_sTrendPoints.arCorte[#ls_iPointer - 1];
	                    //Mantém o valor da Aromatização
	                    #ls_sTrendPoints.arAromatizacao[#ls_iPointer] := 2000;
	                    //Incrementa o ponteiro
	                    #ls_iPointer := #ls_iPointer + 1;
	                    #ls_iPontoAromatizacaoIgual := 0;
	                    
	                END_IF;
	                
	                IF (#ls_iPontoCorteIgual = #ls_iIteration1) AND (#ls_iPontoAromatizacaoIgual = #ls_iIteration1) THEN
	                    
	                    //Replica o valor de entrada para o eixo X
	                    #ls_sTrendPoints.arXBottom[#ls_iPointer] := #i_arXBottom[#ls_iIteration1];
	                    //Replica o valor de entrada para o eixo Y da esquerda
	                    #ls_sTrendPoints.arYLeft[#ls_iPointer] := #i_arYLeft[#ls_iIteration1];
	                    //Replica o valor de entrada para o eixo Y da direita
	                    #ls_sTrendPoints.arYRight[#ls_iPointer] := #i_arYRight[#ls_iIteration1];
	                    //Mantém o valor do Corte
	                    #ls_sTrendPoints.arCorte[#ls_iPointer] := 2000;
	                    //Mantém o valor da Aromatização
	                    #ls_sTrendPoints.arAromatizacao[#ls_iPointer] := 2000;
	                    //Incrementa o ponteiro
	                    #ls_iPointer := #ls_iPointer + 1;
	                    #ls_iPontoAromatizacaoIgual := 0;
	                    #ls_iPontoCorteIgual := 0;
	                    
	                END_IF;
	                
	            ELSIF #ls_bCorteBetween AND #ls_bAromatizacaoBetween THEN
	                
	                //Plota o ponto anterior
	                //Replica o valor de entrada para o eixo X
	                #ls_sTrendPoints.arXBottom[#ls_iPointer] := #i_arXBottom[#ls_iIteration1];
	                //Replica o valor de entrada para o eixo Y da esquerda
	                #ls_sTrendPoints.arYLeft[#ls_iPointer] := #i_arYLeft[#ls_iIteration1];
	                //Replica o valor de entrada para o eixo Y da direita
	                #ls_sTrendPoints.arYRight[#ls_iPointer] := #i_arYRight[#ls_iIteration1];
	                //Determina um valor para o Corte
	                #ls_sTrendPoints.arCorte[#ls_iPointer] := -2000;
	                //Determina um valor para a Aromatização
	                #ls_sTrendPoints.arAromatizacao[#ls_iPointer] := -2000;
	                //Incrementa o ponteiro
	                #ls_iPointer := #ls_iPointer + 1;
	                
	                //Determina um valor para o eixo X
	                #ls_sTrendPoints.arXBottom[#ls_iPointer] := #i_rCorte;
	                //Interpola um valor intermediário para o Y da esquerda
	                #ls_rM := ((#i_arYLeft[#ls_iIteration1 + 1] - #i_arYLeft[#ls_iIteration1]) / (#i_arXBottom[#ls_iIteration1 + 1] - #i_arXBottom[#ls_iIteration1]));
	                #ls_sTrendPoints.arYLeft[#ls_iPointer] := #i_arYLeft[#ls_iIteration1] + #ls_rM * (#i_rCorte - #i_arXBottom[#ls_iIteration1]);
	                //Interpola um valor intermediário para o Y da direita
	                #ls_rM := ((#i_arYRight[#ls_iIteration1 + 1] - #i_arYRight[#ls_iIteration1]) / (#i_arXBottom[#ls_iIteration1 + 1] - #i_arXBottom[#ls_iIteration1]));
	                #ls_sTrendPoints.arYRight[#ls_iPointer] := #i_arYRight[#ls_iIteration1] + #ls_rM * (#i_rCorte - #i_arXBottom[#ls_iIteration1]);
	                //Determina um valor para a Aromatização
	                #ls_sTrendPoints.arAromatizacao[#ls_iPointer] := -2000;
	                //Altera o valor de Corte
	                #ls_sTrendPoints.arCorte[#ls_iPointer] := 2000;
	                //Incrementa o ponteiro
	                #ls_iPointer := #ls_iPointer + 1;
	                
	                //Determina um valor para o eixo X
	                #ls_sTrendPoints.arXBottom[#ls_iPointer] := #i_rAromatizacao;
	                //Interpola um valor intermediário para o Y da esquerda
	                #ls_rM := ((#i_arYLeft[#ls_iIteration1 + 1] - #i_arYLeft[#ls_iIteration1]) / (#i_arXBottom[#ls_iIteration1 + 1] - #i_arXBottom[#ls_iIteration1]));
	                #ls_sTrendPoints.arYLeft[#ls_iPointer] := #i_arYLeft[#ls_iIteration1] + #ls_rM * (#i_rAromatizacao - #i_arXBottom[#ls_iIteration1]);
	                //Interpola um valor intermediário para o Y da direita
	                #ls_rM := ((#i_arYRight[#ls_iIteration1 + 1] - #i_arYRight[#ls_iIteration1]) / (#i_arXBottom[#ls_iIteration1 + 1] - #i_arXBottom[#ls_iIteration1]));
	                #ls_sTrendPoints.arYRight[#ls_iPointer] := #i_arYRight[#ls_iIteration1] + #ls_rM * (#i_rAromatizacao - #i_arXBottom[#ls_iIteration1]);
	                //Altera o valor de Corte
	                #ls_sTrendPoints.arCorte[#ls_iPointer] := 2000;
	                //Altera o valor de Aromatização
	                #ls_sTrendPoints.arAromatizacao[#ls_iPointer] := 2000;
	                //Incrementa o ponteiro
	                #ls_iPointer := #ls_iPointer + 1;
	                
	            ELSIF #ls_bCorteBetween AND NOT #ls_bAromatizacaoBetween THEN
	                
	                //Plota o ponto anterior
	                //Replica o valor de entrada para o eixo X
	                #ls_sTrendPoints.arXBottom[#ls_iPointer] := #i_arXBottom[#ls_iIteration1];
	                //Replica o valor de entrada para o eixo Y da esquerda
	                #ls_sTrendPoints.arYLeft[#ls_iPointer] := #i_arYLeft[#ls_iIteration1];
	                //Replica o valor de entrada para o eixo Y da direita
	                #ls_sTrendPoints.arYRight[#ls_iPointer] := #i_arYRight[#ls_iIteration1];
	                //Determina um valor para o Corte
	                IF #ls_iPointer = 1 THEN
	                    #ls_sTrendPoints.arCorte[#ls_iPointer] := -2000;
	                ELSE
	                    #ls_sTrendPoints.arCorte[#ls_iPointer] := #ls_sTrendPoints.arCorte[#ls_iPointer - 1];
	                END_IF;
	                //Determina um valor para a Aromatização
	                #ls_sTrendPoints.arAromatizacao[#ls_iPointer] := #ls_sTrendPoints.arAromatizacao[#ls_iPointer - 1];
	                //Incrementa o ponteiro
	                #ls_iPointer := #ls_iPointer + 1;
	                
	                //Determina um valor para o eixo X
	                #ls_sTrendPoints.arXBottom[#ls_iPointer] := #i_rCorte;
	                //Interpola um valor intermediário para o Y da esquerda
	                #ls_rM := ((#i_arYLeft[#ls_iIteration1 + 1] - #i_arYLeft[#ls_iIteration1]) / (#i_arXBottom[#ls_iIteration1 + 1] - #i_arXBottom[#ls_iIteration1]));
	                #ls_sTrendPoints.arYLeft[#ls_iPointer] := #i_arYLeft[#ls_iIteration1] + #ls_rM * (#i_rCorte - #i_arXBottom[#ls_iIteration1]);
	                //Interpola um valor intermediário para o Y da direita
	                #ls_rM := ((#i_arYRight[#ls_iIteration1 + 1] - #i_arYRight[#ls_iIteration1]) / (#i_arXBottom[#ls_iIteration1 + 1] - #i_arXBottom[#ls_iIteration1]));
	                #ls_sTrendPoints.arYRight[#ls_iPointer] := #i_arYRight[#ls_iIteration1] + #ls_rM * (#i_rCorte - #i_arXBottom[#ls_iIteration1]);
	                //Determina um valor para a Aromatização
	                #ls_sTrendPoints.arAromatizacao[#ls_iPointer] := #ls_sTrendPoints.arAromatizacao[#ls_iPointer - 1];
	                //Altera o valor de Corte
	                #ls_sTrendPoints.arCorte[#ls_iPointer] := 2000;
	                //Incrementa o ponteiro
	                #ls_iPointer := #ls_iPointer + 1;
	                
	            ELSIF NOT #ls_bCorteBetween AND #ls_bAromatizacaoBetween THEN
	                
	                //Plota o ponto anterior
	                //Replica o valor de entrada para o eixo X
	                #ls_sTrendPoints.arXBottom[#ls_iPointer] := #i_arXBottom[#ls_iIteration1];
	                //Replica o valor de entrada para o eixo Y da esquerda
	                #ls_sTrendPoints.arYLeft[#ls_iPointer] := #i_arYLeft[#ls_iIteration1];
	                //Replica o valor de entrada para o eixo Y da direita
	                #ls_sTrendPoints.arYRight[#ls_iPointer] := #i_arYRight[#ls_iIteration1];
	                //Determina um valor para o Corte
	                #ls_sTrendPoints.arCorte[#ls_iPointer] := #ls_sTrendPoints.arCorte[#ls_iPointer - 1];
	                //Determina um valor para a Aromatização
	                #ls_sTrendPoints.arAromatizacao[#ls_iPointer] := #ls_sTrendPoints.arAromatizacao[#ls_iPointer - 1];
	                //Incrementa o ponteiro
	                #ls_iPointer := #ls_iPointer + 1;
	                
	                //Determina um valor para o eixo X
	                #ls_sTrendPoints.arXBottom[#ls_iPointer] := #i_rAromatizacao;
	                //Interpola um valor intermediário para o Y da esquerda
	                #ls_rM := ((#i_arYLeft[#ls_iIteration1 + 1] - #i_arYLeft[#ls_iIteration1]) / (#i_arXBottom[#ls_iIteration1 + 1] - #i_arXBottom[#ls_iIteration1]));
	                #ls_sTrendPoints.arYLeft[#ls_iPointer] := #i_arYLeft[#ls_iIteration1] + #ls_rM * (#i_rAromatizacao - #i_arXBottom[#ls_iIteration1]);
	                //Interpola um valor intermediário para o Y da direita
	                #ls_rM := ((#i_arYRight[#ls_iIteration1 + 1] - #i_arYRight[#ls_iIteration1]) / (#i_arXBottom[#ls_iIteration1 + 1] - #i_arXBottom[#ls_iIteration1]));
	                #ls_sTrendPoints.arYRight[#ls_iPointer] := #i_arYRight[#ls_iIteration1] + #ls_rM * (#i_rAromatizacao - #i_arXBottom[#ls_iIteration1]);
	                //Determina um valor para o Corte
	                #ls_sTrendPoints.arCorte[#ls_iPointer] := #ls_sTrendPoints.arCorte[#ls_iPointer - 1];
	                //Altera o valor de Aromatização
	                #ls_sTrendPoints.arAromatizacao[#ls_iPointer] := 2000;
	                //Incrementa o ponteiro
	                #ls_iPointer := #ls_iPointer + 1;
	                
	            END_IF;
	            IF #ls_iPointer = #ls_iNumberOfPoints THEN
	                #ls_sTrendPoints.arXBottom[#ls_iNumberOfPoints] := #i_arXBottom[#ls_iIteration1 + 1];
	                #ls_sTrendPoints.arYLeft[#ls_iNumberOfPoints] := #i_arYLeft[#ls_iIteration1 + 1];
	                #ls_sTrendPoints.arYRight[#ls_iNumberOfPoints] := #i_arYRight[#ls_iIteration1 + 1];
	                IF #ls_iPontoCorteIgual = #ls_iPointer THEN
	                    #ls_sTrendPoints.arCorte[#ls_iNumberOfPoints] := 2000;
	                ELSE
	                    #ls_sTrendPoints.arCorte[#ls_iPointer] := #ls_sTrendPoints.arCorte[#ls_iPointer - 1];
	                END_IF;
	                IF #ls_iPontoAromatizacaoIgual = #ls_iPointer THEN
	                    #ls_sTrendPoints.arAromatizacao[#ls_iNumberOfPoints] := 2000;
	                ELSE
	                    #ls_sTrendPoints.arAromatizacao[#ls_iPointer] := #ls_sTrendPoints.arAromatizacao[#ls_iPointer - 1];
	                END_IF;
	            END_IF;
	        END_FOR;
	    END_IF;
	END_REGION
	REGION ESPELHA OS LIMITES E O NÚMERO DE PONTOS PARA FORA
	    #q_iNumberOfPoints := #ls_iNumberOfPoints;
	    #q_rMinTempYLeft := ROUND_INT(REAL_TO_INT(#ls_rMinTempYLeft));
	    #q_rMaxTempYLeft := ROUND_INT(REAL_TO_INT(#ls_rMaxTempYLeft));
	    #q_rMinTempYRight := ROUND_INT(REAL_TO_INT(#ls_rMinTempYRight));
	    #q_rMaxTempYRight := ROUND_INT(REAL_TO_INT(#ls_rMaxTempYRight));
	    #q_rMinTempXBottom := ROUND_INT(REAL_TO_INT(#ls_rMinTempXBottom));
	    #q_rMaxTempXBottom := ROUND_INT(REAL_TO_INT(#ls_rMaxTempXBottom));
	END_REGION
	REGION GERA O CLOCK DE ENVIO DE INFORMAÇÕES PARA O SUPERVISÓRIO
	    #R_TRIG_Clock(CLK := "Clock_5Hz",
	                  Q => #ls_bClock);
	    //Variável de step deve ser zerada pelo supervisório
	    IF #ls_bClock AND NOT (#ls_iStep1 > #ls_iNumberOfPoints) THEN
	        #q_rX := #ls_sTrendPoints.arXBottom[#ls_iStep1];
	        #q_rYLeft := #ls_sTrendPoints.arYLeft[#ls_iStep1];
	        #q_rYRight := #ls_sTrendPoints.arYRight[#ls_iStep1];
	        #q_rCorte := #ls_sTrendPoints.arCorte[#ls_iStep1];
	        #q_rAromatizao := #ls_sTrendPoints.arAromatizacao[#ls_iStep1];
	        #ls_iStep1 := #ls_iStep1 + 1;
	    END_IF;
	END_REGION
END_FUNCTION_BLOCK

